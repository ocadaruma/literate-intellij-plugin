import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.jetbrains.grammarkit.tasks.*

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.intellij.plugins:gradle-intellij-plugin:1.5.2"
        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-grammarkit-plugin:2021.1.3"
    }
}

apply plugin: "java"
apply plugin: "org.jetbrains.grammarkit"
apply plugin: "org.jetbrains.intellij"

group = "com.mayreh.intellij.plugins"
version = "${version}" + (snapshot.toBoolean() ? "-SNAPSHOT" : "")

repositories {
    mavenCentral()
}

ext {
    lombokVersion = '1.18.22'
}

dependencies {
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.assertj:assertj-core:3.21.0"
}

intellij {
    version = "211.7628.21"
    plugins = ["org.intellij.intelliLang"]
    updateSinceUntilBuild = false
}

patchPluginXml {
    version = project.version
    sinceBuild = findProperty("sinceBuild")
    untilBuild = findProperty("untilBuild")
}

sourceSets {
    main {
        java.srcDirs("src/gen")
    }
}

task generateWebLexer(type: GenerateLexer) {
    source = "src/main/grammer/web.flex"
    targetDir = "src/gen/com/mayreh/intellij/plugin/web/lexer"
    targetClass = "_WebLexer"
    purgeOldFiles = true
}

task generateWebParser(type: GenerateParser) {
    source = "src/main/grammer/web.bnf"
    targetRoot = "src/gen"
    pathToParser = "/com/mayreh/intellij/plugin/web/parser/WebParser.java"
    pathToPsiRoot = "/com/mayreh/intellij/plugin/web/psi"
    purgeOldFiles = true
}

compileJava.dependsOn(
        generateWebLexer,
        generateWebParser)

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true
        showStandardStreams false
    }
}

publishPlugin {
    token = findProperty("intellijPublishToken")
}
